// This controller responsible for Invite token
package controllers

import (
	"net/http"

	"github.com/RaguSoftEng/inviteservice_api/src/repository"
	"github.com/RaguSoftEng/inviteservice_api/util"
	"github.com/gorilla/mux"
)

// Generate 6 digits alphanumeric token
// return alphanumeric token
func (server *Server) GenerateToken(w http.ResponseWriter, r *http.Request) {

	uid, er := util.ExtractTokenID(r)
	if er != nil {
		util.ERROR(w, http.StatusUnprocessableEntity, er)
		return
	}

	token, err := repository.GenerateToken(server.DB, uid)
	if err != nil {
		util.ERROR(w, http.StatusUnprocessableEntity, err)
		return
	}

	util.JSON(w, http.StatusOK, token)
}

// recall or disable token by admin
// parameter : token
func (server *Server) DisableToken(w http.ResponseWriter, r *http.Request) {
	uid, er := util.ExtractTokenID(r)
	if er != nil {
		util.ERROR(w, http.StatusUnprocessableEntity, er)
		return
	}

	vars := mux.Vars(r)

	_, err := repository.DisableToken(server.DB, vars["token"], uid)
	if err != nil {
		util.ERROR(w, http.StatusUnprocessableEntity, err)
		return
	}

	util.JSON(w, http.StatusOK, "[ OK ] Token disabled.")
}

// Validate Invite token
// parameter : token
func (server *Server) ValidateToken(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)

	_, err := repository.ValidateInviteToken(server.DB, vars["token"])
	if err != nil {
		util.ERROR(w, http.StatusUnprocessableEntity, err)
		return
	}
	util.JSON(w, http.StatusOK, true)
}

// List all tokens generated by an admin
func (server *Server) GetTokens(w http.ResponseWriter, r *http.Request) {

	uid, er := util.ExtractTokenID(r)
	if er != nil {
		util.ERROR(w, http.StatusUnprocessableEntity, er)
		return
	}

	tokens, err := repository.GetTokens(server.DB, uid)
	if err != nil {
		util.ERROR(w, http.StatusUnprocessableEntity, err)
		return
	}
	util.JSON(w, http.StatusOK, tokens)
}
